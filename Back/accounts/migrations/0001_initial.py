# Generated by Django 4.2.16 on 2024-11-18 07:40

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthyear', models.IntegerField(validators=[django.core.validators.MinValueValidator(1900), django.core.validators.MaxValueValidator(9999)])),
                ('profile_img', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('income', models.CharField(choices=[('0-50%', '약 100만원'), ('51~75%', '약 150만원'), ('76~100%', '약 200만원'), ('101~200%', '약 450만원'), ('200%~', '약 450초과')], max_length=20)),
                ('career', models.CharField(choices=[('student', '학생'), ('office_worker', '회사원'), ('public_servant', '공무원'), ('professional', '전문직'), ('self_employed', '자영업자'), ('freelancer', '프리랜서'), ('business_owner', '사업자'), ('part_time', '아르바이트/비정규직'), ('housewife', '전업주부'), ('unemployed', '무직/구직중'), ('retired', '은퇴자'), ('farmer', '농업/어업/임업'), ('soldier', '군인'), ('teacher', '교사/교육자'), ('medical', '의료종사자'), ('financial', '금융업 종사자'), ('it_worker', 'IT업계 종사자'), ('service_industry', '서비스업 종사자'), ('manufacturing', '제조업 종사자'), ('startup_founder', '스타트업 창업자'), ('social_worker', '사회복지사'), ('researcher', '연구원'), ('other', '기타')], max_length=20)),
                ('region', models.CharField(choices=[('seoul', '서울특별시'), ('busan', '부산광역시'), ('daegu', '대구광역시'), ('incheon', '인천광역시'), ('gwangju', '광주광역시'), ('daejeon', '대전광역시'), ('ulsan', '울산광역시'), ('sejong', '세종특별자치시'), ('gyeonggi', '경기도'), ('gangwon', '강원특별자치도'), ('chungbuk', '충청북도'), ('chungnam', '충청남도'), ('jeonbuk', '전라북도'), ('jeonnam', '전라남도'), ('gyeongbuk', '경상북도'), ('gyeongnam', '경상남도'), ('jeju', '제주특별자치도')], max_length=10)),
                ('condition1', models.BooleanField(default=False)),
                ('condition2', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
