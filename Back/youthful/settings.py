"""
Django settings for youthful project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^x*kutk$_myco&qhx+h+l%^vp0@%k#=3j(=(dehjkbvm^wx8f#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    # 앱등록
    'accounts',
    'articles',
    'communities',
    'deposits',
    'savings',
    'subsidies',
    'maps',
    'exchanges',
    # 여기까지 앱 등록

    # 추가 된 부분---------------------------------------------------------------------

    'rest_framework',  # Django REST Framework - RESTful API 구축을 위한 강력한 툴킷
    'rest_framework.authtoken',  # DRF의 토큰 기반 인증 시스템
    'dj_rest_auth',  # dj-rest-auth - REST API 엔드포인트를 통한 인증 기능 제공
    'corsheaders',  # django-cors-headers - 크로스 오리진 리소스 공유(CORS) 설정을 위한 앱
    'django.contrib.sites',  # Django의 사이트 프레임워크 - 여러 도메인 관리에 사용
    'allauth',  # django-allauth - 유연한 인증, 등록, 계정 관리 기능 제공
    'allauth.account',  # allauth의 계정 관리 기능
    'dj_rest_auth.registration',  # dj-rest-auth의 등록 기능 - REST API를 통한 사용자 등록

    # 여기까지 추가-------------------------------------------------------------------------

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# 추가 된 부분-------------------------------------------------------------------------

# Django의 sites 프레임워크에서 사용할 현재 사이트의 ID
# django.contrib.sites 앱을 사용할 때 필요하며, 기본값으로 1을 사용
SITE_ID = 1

# Django REST Framework (DRF) 설정
REST_FRAMEWORK = {
    # 인증 설정
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 토큰 기반 인증을 기본 인증 방식으로 설정
        # 클라이언트는 요청 헤더에 'Authorization: Token <your-token>' 형식으로 토큰을 포함시켜야 함
        'rest_framework.authentication.TokenAuthentication',
    ],

    # 권한 설정
    'DEFAULT_PERMISSION_CLASSES': [
        # 모든 뷰에 대해 기본적으로 누구나 접근 가능하도록 설정
        # 주의: 이 설정은 개발 중에는 편리할 수 있지만, 프로덕션 환경에서는 보안상 위험할 수 있음
        # 실제 서비스에서는 더 제한적인 권한 설정을 사용하는 것이 좋음
        'rest_framework.permissions.AllowAny',
    ],
}

# 여기까지 추가 된 부분--------------------------------------------------------------------

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'youthful.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'youthful.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# 추가 한 부분----------------------------------------------------------------
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ]
}

AUTH_USER_MODEL = 'accounts.User'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8080',  # 프론트엔드 서버 주소
    'http://127.0.0.1:5173',  # 로컬 개발 서버 주소 (IP 주소 사용)
    'http://localhost:5173',  # 로컬 개발 서버 주소 (localhost 사용)
]

# dj-rest-auth 설정
# dj-rest-auth 라이브러리의 회원가입 기능을 커스터마이즈하기 위한 설정

# 회원가입 시 사용할 커스텀 시리얼라이저 지정
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'accounts.serializers.CustomRegisterSerializer',
}

REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'accounts.serializers.CustomUserDetailsSerializer',
}


# allauth 설정
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'

# 회원가입 후 자동 로그인 설정
REST_AUTH = {
    'LOGIN_ON_REGISTER': True,
}

# 여기까지 추가 한 부분---------------------------------------------------------------